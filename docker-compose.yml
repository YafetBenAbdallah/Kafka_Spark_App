version: '3'
services:  
  spark_app:
    build: 
      context: .
      dockerfile: Dockerfile.spark
    ports:
      - '8080:8080'
    depends_on:
      - kafka
      - python1_producer
    networks:
      - datapipeline

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: ["CMD", "sh", "-c", "echo stat | nc localhost 2181 | grep Mode"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - datapipeline

  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    hostname: kafka
    ports:
      - '9092:9092'
    expose:
     - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - zookeeper
    networks:
      - datapipeline
  topic-creation:
    image: 'bitnami/kafka:latest'
    depends_on:
      - kafka
    entrypoint: >
      bash -c "
        sleep 10 && 
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic test-topic-python1 --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1 &&
        /opt/bitnami/kafka/bin/kafka-topics.sh --create --topic test-topic-python2 --bootstrap-server kafka:9093 --partitions 1 --replication-factor 1"
    networks:
      - datapipeline
  mongodb:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    ports:
      - '27017:27017'
    networks:
      - datapipeline

  python1_producer:
    build: 
      context: .
      dockerfile: Dockerfile.producer
    networks:
      - datapipeline
    depends_on:
      - kafka

  python2_consumer:
    build: 
      context: .
      dockerfile: Dockerfile.consumer
    networks:
      - datapipeline
    depends_on:
      - kafka
      - spark_app

networks:
  datapipeline:
    ipam:
      driver: default
      config:
        - subnet: "172.19.0.0/16"
